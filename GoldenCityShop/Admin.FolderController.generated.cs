// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace GoldenCityShop.Areas.Admin.Controllers
{
    public partial class FolderController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FolderController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Edit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Pictures()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pictures);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddPictureToFolder()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPictureToFolder);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeletePicture()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeletePicture);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult CheckFolderNameExistForAdd()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult CheckFolderNameExistForEdit()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForEdit);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FolderController Actions { get { return MVC.Admin.Folder; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Folder";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Folder";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Create = "Create";
            public readonly string Edit = "Edit";
            public readonly string Delete = "Delete";
            public readonly string Pictures = "Pictures";
            public readonly string List = "List";
            public readonly string AddPictureToFolder = "AddPictureToFolder";
            public readonly string DeletePicture = "DeletePicture";
            public readonly string ListForLightBox = "ListForLightBox";
            public readonly string CheckFolderNameExistForAdd = "CheckFolderNameExistForAdd";
            public readonly string CheckFolderNameExistForEdit = "CheckFolderNameExistForEdit";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Create = "Create";
            public const string Edit = "Edit";
            public const string Delete = "Delete";
            public const string Pictures = "Pictures";
            public const string List = "List";
            public const string AddPictureToFolder = "AddPictureToFolder";
            public const string DeletePicture = "DeletePicture";
            public const string ListForLightBox = "ListForLightBox";
            public const string CheckFolderNameExistForAdd = "CheckFolderNameExistForAdd";
            public const string CheckFolderNameExistForEdit = "CheckFolderNameExistForEdit";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string elementId = "elementId";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string viewModel = "viewModel";
            public readonly string files = "files";
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Pictures s_params_Pictures = new ActionParamsClass_Pictures();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Pictures PicturesParams { get { return s_params_Pictures; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Pictures
        {
            public readonly string folderId = "folderId";
            public readonly string elementId = "elementId";
        }
        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List
        {
            public readonly string page = "page";
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_AddPictureToFolder s_params_AddPictureToFolder = new ActionParamsClass_AddPictureToFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddPictureToFolder AddPictureToFolderParams { get { return s_params_AddPictureToFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddPictureToFolder
        {
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_DeletePicture s_params_DeletePicture = new ActionParamsClass_DeletePicture();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeletePicture DeletePictureParams { get { return s_params_DeletePicture; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeletePicture
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ListForLightBox s_params_ListForLightBox = new ActionParamsClass_ListForLightBox();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListForLightBox ListForLightBoxParams { get { return s_params_ListForLightBox; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListForLightBox
        {
            public readonly string page = "page";
            public readonly string folderId = "folderId";
        }
        static readonly ActionParamsClass_CheckFolderNameExistForAdd s_params_CheckFolderNameExistForAdd = new ActionParamsClass_CheckFolderNameExistForAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckFolderNameExistForAdd CheckFolderNameExistForAddParams { get { return s_params_CheckFolderNameExistForAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckFolderNameExistForAdd
        {
            public readonly string name = "name";
        }
        static readonly ActionParamsClass_CheckFolderNameExistForEdit s_params_CheckFolderNameExistForEdit = new ActionParamsClass_CheckFolderNameExistForEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckFolderNameExistForEdit CheckFolderNameExistForEditParams { get { return s_params_CheckFolderNameExistForEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckFolderNameExistForEdit
        {
            public readonly string name = "name";
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ListPartial = "_ListPartial";
                public readonly string _PicturePartial = "_PicturePartial";
                public readonly string AddPictureToFolder = "AddPictureToFolder";
                public readonly string Create = "Create";
                public readonly string Edit = "Edit";
                public readonly string Index = "Index";
                public readonly string Pictures = "Pictures";
            }
            public readonly string _ListPartial = "~/Areas/Admin/Views/Folder/_ListPartial.cshtml";
            public readonly string _PicturePartial = "~/Areas/Admin/Views/Folder/_PicturePartial.cshtml";
            public readonly string AddPictureToFolder = "~/Areas/Admin/Views/Folder/AddPictureToFolder.cshtml";
            public readonly string Create = "~/Areas/Admin/Views/Folder/Create.cshtml";
            public readonly string Edit = "~/Areas/Admin/Views/Folder/Edit.cshtml";
            public readonly string Index = "~/Areas/Admin/Views/Folder/Index.cshtml";
            public readonly string Pictures = "~/Areas/Admin/Views/Folder/Pictures.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_FolderController : GoldenCityShop.Areas.Admin.Controllers.FolderController
    {
        public T4MVC_FolderController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string elementId);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index(string elementId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "elementId", elementId);
            IndexOverride(callInfo, elementId);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.Folder.AddFolderViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Create(ViewModel.Admin.Folder.AddFolderViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            CreateOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Edit(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.Folder.EditFolderViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(ViewModel.Admin.Folder.EditFolderViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            EditOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void PicturesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? folderId, string elementId);

        [NonAction]
        public override System.Web.Mvc.ActionResult Pictures(long? folderId, string elementId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Pictures);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "elementId", elementId);
            PicturesOverride(callInfo, folderId, elementId);
            return callInfo;
        }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int page, long folderId);

        [NonAction]
        public override System.Web.Mvc.ActionResult List(int page, long folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ListOverride(callInfo, page, folderId);
            return callInfo;
        }

        [NonAction]
        partial void AddPictureToFolderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? folderId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddPictureToFolder(long? folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPictureToFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            AddPictureToFolderOverride(callInfo, folderId);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Collections.Generic.IEnumerable<System.Web.HttpPostedFileBase> files, long folderId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Create(System.Collections.Generic.IEnumerable<System.Web.HttpPostedFileBase> files, long folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "files", files);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            CreateOverride(callInfo, files, folderId);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeletePictureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeletePicture(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeletePicture);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeletePictureOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ListForLightBoxOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int page, long folderId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListForLightBox(int page, long folderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListForLightBox);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderId", folderId);
            ListForLightBoxOverride(callInfo, page, folderId);
            return callInfo;
        }

        [NonAction]
        partial void CheckFolderNameExistForAddOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string name);

        [NonAction]
        public override System.Web.Mvc.JsonResult CheckFolderNameExistForAdd(string name)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            CheckFolderNameExistForAddOverride(callInfo, name);
            return callInfo;
        }

        [NonAction]
        partial void CheckFolderNameExistForEditOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string name, long id);

        [NonAction]
        public override System.Web.Mvc.JsonResult CheckFolderNameExistForEdit(string name, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckFolderNameExistForEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CheckFolderNameExistForEditOverride(callInfo, name, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
