// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace GoldenCityShop.Areas.Admin.Controllers
{
    public partial class CategoryController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected CategoryController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Edit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AttributeList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttributeList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditAttribute()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditAttribute);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddAttribute()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAttribute);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddCheckExistAttributeForCategory()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddCheckExistAttributeForCategory);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditCheckExistAttributeForCategory()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditCheckExistAttributeForCategory);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteAttribute()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAttribute);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CheckExistCategoryforAdd()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckExistCategoryforAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CheckExistCategoryforEdit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckExistCategoryforEdit);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CategoryController Actions { get { return MVC.Admin.Category; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Category";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Category";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Create = "Create";
            public readonly string Edit = "Edit";
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Delete = "Delete";
            public readonly string AttributeList = "AttributeList";
            public readonly string EditAttribute = "EditAttribute";
            public readonly string AddAttribute = "AddAttribute";
            public readonly string AddCheckExistAttributeForCategory = "AddCheckExistAttributeForCategory";
            public readonly string EditCheckExistAttributeForCategory = "EditCheckExistAttributeForCategory";
            public readonly string DeleteAttribute = "DeleteAttribute";
            public readonly string CheckExistCategoryforAdd = "CheckExistCategoryforAdd";
            public readonly string CheckExistCategoryforEdit = "CheckExistCategoryforEdit";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Create = "Create";
            public const string Edit = "Edit";
            public const string Index = "Index";
            public const string List = "List";
            public const string Delete = "Delete";
            public const string AttributeList = "AttributeList";
            public const string EditAttribute = "EditAttribute";
            public const string AddAttribute = "AddAttribute";
            public const string AddCheckExistAttributeForCategory = "AddCheckExistAttributeForCategory";
            public const string EditCheckExistAttributeForCategory = "EditCheckExistAttributeForCategory";
            public const string DeleteAttribute = "DeleteAttribute";
            public const string CheckExistCategoryforAdd = "CheckExistCategoryforAdd";
            public const string CheckExistCategoryforEdit = "CheckExistCategoryforEdit";
        }


        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List
        {
            public readonly string term = "term";
            public readonly string page = "page";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AttributeList s_params_AttributeList = new ActionParamsClass_AttributeList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AttributeList AttributeListParams { get { return s_params_AttributeList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AttributeList
        {
            public readonly string categoryId = "categoryId";
        }
        static readonly ActionParamsClass_EditAttribute s_params_EditAttribute = new ActionParamsClass_EditAttribute();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditAttribute EditAttributeParams { get { return s_params_EditAttribute; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditAttribute
        {
            public readonly string id = "id";
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_AddAttribute s_params_AddAttribute = new ActionParamsClass_AddAttribute();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAttribute AddAttributeParams { get { return s_params_AddAttribute; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAttribute
        {
            public readonly string categoryId = "categoryId";
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_AddCheckExistAttributeForCategory s_params_AddCheckExistAttributeForCategory = new ActionParamsClass_AddCheckExistAttributeForCategory();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddCheckExistAttributeForCategory AddCheckExistAttributeForCategoryParams { get { return s_params_AddCheckExistAttributeForCategory; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddCheckExistAttributeForCategory
        {
            public readonly string name = "name";
            public readonly string categoryId = "categoryId";
        }
        static readonly ActionParamsClass_EditCheckExistAttributeForCategory s_params_EditCheckExistAttributeForCategory = new ActionParamsClass_EditCheckExistAttributeForCategory();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCheckExistAttributeForCategory EditCheckExistAttributeForCategoryParams { get { return s_params_EditCheckExistAttributeForCategory; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCheckExistAttributeForCategory
        {
            public readonly string name = "name";
            public readonly string id = "id";
            public readonly string categoryId = "categoryId";
        }
        static readonly ActionParamsClass_DeleteAttribute s_params_DeleteAttribute = new ActionParamsClass_DeleteAttribute();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteAttribute DeleteAttributeParams { get { return s_params_DeleteAttribute; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteAttribute
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_CheckExistCategoryforAdd s_params_CheckExistCategoryforAdd = new ActionParamsClass_CheckExistCategoryforAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckExistCategoryforAdd CheckExistCategoryforAddParams { get { return s_params_CheckExistCategoryforAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckExistCategoryforAdd
        {
            public readonly string name = "name";
        }
        static readonly ActionParamsClass_CheckExistCategoryforEdit s_params_CheckExistCategoryforEdit = new ActionParamsClass_CheckExistCategoryforEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckExistCategoryforEdit CheckExistCategoryforEditParams { get { return s_params_CheckExistCategoryforEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckExistCategoryforEdit
        {
            public readonly string name = "name";
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ListPartial = "_ListPartial";
                public readonly string AddAttribute = "AddAttribute";
                public readonly string AttributeList = "AttributeList";
                public readonly string Create = "Create";
                public readonly string Edit = "Edit";
                public readonly string EditAttribute = "EditAttribute";
                public readonly string Index = "Index";
            }
            public readonly string _ListPartial = "~/Areas/Admin/Views/Category/_ListPartial.cshtml";
            public readonly string AddAttribute = "~/Areas/Admin/Views/Category/AddAttribute.cshtml";
            public readonly string AttributeList = "~/Areas/Admin/Views/Category/AttributeList.cshtml";
            public readonly string Create = "~/Areas/Admin/Views/Category/Create.cshtml";
            public readonly string Edit = "~/Areas/Admin/Views/Category/Edit.cshtml";
            public readonly string EditAttribute = "~/Areas/Admin/Views/Category/EditAttribute.cshtml";
            public readonly string Index = "~/Areas/Admin/Views/Category/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_CategoryController : GoldenCityShop.Areas.Admin.Controllers.CategoryController
    {
        public T4MVC_CategoryController() : base(Dummy.Instance) { }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            CreateOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.AddCategoryViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Create(ViewModel.Admin.AddCategoryViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            CreateOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Edit(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.EditCategoryViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(ViewModel.Admin.EditCategoryViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            EditOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term, int page);

        [NonAction]
        public override System.Web.Mvc.ActionResult List(string term, int page)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ListOverride(callInfo, term, page);
            return callInfo;
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AttributeListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? categoryId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AttributeList(long? categoryId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AttributeList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            AttributeListOverride(callInfo, categoryId);
            return callInfo;
        }

        [NonAction]
        partial void EditAttributeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditAttribute(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditAttribute);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditAttributeOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditAttributeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.EditAttributeViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditAttribute(ViewModel.Admin.EditAttributeViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditAttribute);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            EditAttributeOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddAttributeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? categoryId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddAttribute(long? categoryId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAttribute);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            AddAttributeOverride(callInfo, categoryId);
            return callInfo;
        }

        [NonAction]
        partial void AddAttributeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.AddAttributeViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAttribute(ViewModel.Admin.AddAttributeViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAttribute);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            AddAttributeOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddCheckExistAttributeForCategoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, long categoryId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddCheckExistAttributeForCategory(string name, long categoryId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddCheckExistAttributeForCategory);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            AddCheckExistAttributeForCategoryOverride(callInfo, name, categoryId);
            return callInfo;
        }

        [NonAction]
        partial void EditCheckExistAttributeForCategoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, long id, long categoryId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditCheckExistAttributeForCategory(string name, long id, long categoryId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditCheckExistAttributeForCategory);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "categoryId", categoryId);
            EditCheckExistAttributeForCategoryOverride(callInfo, name, id, categoryId);
            return callInfo;
        }

        [NonAction]
        partial void DeleteAttributeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteAttribute(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteAttribute);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteAttributeOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void CheckExistCategoryforAddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name);

        [NonAction]
        public override System.Web.Mvc.ActionResult CheckExistCategoryforAdd(string name)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckExistCategoryforAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            CheckExistCategoryforAddOverride(callInfo, name);
            return callInfo;
        }

        [NonAction]
        partial void CheckExistCategoryforEditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, long id);

        [NonAction]
        public override System.Web.Mvc.ActionResult CheckExistCategoryforEdit(string name, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckExistCategoryforEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            CheckExistCategoryforEditOverride(callInfo, name, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
