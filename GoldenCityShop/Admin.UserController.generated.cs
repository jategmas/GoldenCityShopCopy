// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace GoldenCityShop.Areas.Admin.Controllers
{
    public partial class UserController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UserController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Details()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Edit()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult AdminCheckUserNameIsExistForAdd()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AdminCheckUserNameIsExistForAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult AdminCheckPhoneNumberIsExistForAdd()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AdminCheckPhoneNumberIsExistForAdd);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult EditCheckUserNameIsExist()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCheckUserNameIsExist);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult EditCheckPhoneNumberIsExist()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCheckPhoneNumberIsExist);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UserController Actions { get { return MVC.Admin.User; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "User";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "User";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Details = "Details";
            public readonly string Edit = "Edit";
            public readonly string Delete = "Delete";
            public readonly string Add = "Add";
            public readonly string AdminCheckUserNameIsExistForAdd = "AdminCheckUserNameIsExistForAdd";
            public readonly string AdminCheckPhoneNumberIsExistForAdd = "AdminCheckPhoneNumberIsExistForAdd";
            public readonly string EditCheckUserNameIsExist = "EditCheckUserNameIsExist";
            public readonly string EditCheckPhoneNumberIsExist = "EditCheckPhoneNumberIsExist";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string List = "List";
            public const string Details = "Details";
            public const string Edit = "Edit";
            public const string Delete = "Delete";
            public const string Add = "Add";
            public const string AdminCheckUserNameIsExistForAdd = "AdminCheckUserNameIsExistForAdd";
            public const string AdminCheckPhoneNumberIsExistForAdd = "AdminCheckPhoneNumberIsExistForAdd";
            public const string EditCheckUserNameIsExist = "EditCheckUserNameIsExist";
            public const string EditCheckPhoneNumberIsExist = "EditCheckPhoneNumberIsExist";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List
        {
            public readonly string term = "term";
            public readonly string pageNumber = "pageNumber";
            public readonly string pageCount = "pageCount";
            public readonly string order = "order";
            public readonly string userOrderBy = "userOrderBy";
            public readonly string userSearchBy = "userSearchBy";
        }
        static readonly ActionParamsClass_Details s_params_Details = new ActionParamsClass_Details();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Details DetailsParams { get { return s_params_Details; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Details
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Add s_params_Add = new ActionParamsClass_Add();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Add AddParams { get { return s_params_Add; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Add
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_AdminCheckUserNameIsExistForAdd s_params_AdminCheckUserNameIsExistForAdd = new ActionParamsClass_AdminCheckUserNameIsExistForAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminCheckUserNameIsExistForAdd AdminCheckUserNameIsExistForAddParams { get { return s_params_AdminCheckUserNameIsExistForAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminCheckUserNameIsExistForAdd
        {
            public readonly string userName = "userName";
        }
        static readonly ActionParamsClass_AdminCheckPhoneNumberIsExistForAdd s_params_AdminCheckPhoneNumberIsExistForAdd = new ActionParamsClass_AdminCheckPhoneNumberIsExistForAdd();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminCheckPhoneNumberIsExistForAdd AdminCheckPhoneNumberIsExistForAddParams { get { return s_params_AdminCheckPhoneNumberIsExistForAdd; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminCheckPhoneNumberIsExistForAdd
        {
            public readonly string phoneNumber = "phoneNumber";
        }
        static readonly ActionParamsClass_EditCheckUserNameIsExist s_params_EditCheckUserNameIsExist = new ActionParamsClass_EditCheckUserNameIsExist();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCheckUserNameIsExist EditCheckUserNameIsExistParams { get { return s_params_EditCheckUserNameIsExist; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCheckUserNameIsExist
        {
            public readonly string userName = "userName";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditCheckPhoneNumberIsExist s_params_EditCheckPhoneNumberIsExist = new ActionParamsClass_EditCheckPhoneNumberIsExist();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCheckPhoneNumberIsExist EditCheckPhoneNumberIsExistParams { get { return s_params_EditCheckPhoneNumberIsExist; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCheckPhoneNumberIsExist
        {
            public readonly string phoneNumber = "phoneNumber";
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ListPartial = "_ListPartial";
                public readonly string Add = "Add";
                public readonly string Details = "Details";
                public readonly string Edit = "Edit";
                public readonly string Index = "Index";
            }
            public readonly string _ListPartial = "~/Areas/Admin/Views/User/_ListPartial.cshtml";
            public readonly string Add = "~/Areas/Admin/Views/User/Add.cshtml";
            public readonly string Details = "~/Areas/Admin/Views/User/Details.cshtml";
            public readonly string Edit = "~/Areas/Admin/Views/User/Edit.cshtml";
            public readonly string Index = "~/Areas/Admin/Views/User/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UserController : GoldenCityShop.Areas.Admin.Controllers.UserController
    {
        public T4MVC_UserController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term, int pageNumber, int pageCount, DomainClasses.Enums.Order order, DomainClasses.Enums.UserOrderBy userOrderBy, DomainClasses.Enums.UserSearchBy userSearchBy);

        [NonAction]
        public override System.Web.Mvc.ActionResult List(string term, int pageNumber, int pageCount, DomainClasses.Enums.Order order, DomainClasses.Enums.UserOrderBy userOrderBy, DomainClasses.Enums.UserSearchBy userSearchBy)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageNumber", pageNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageCount", pageCount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "order", order);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userOrderBy", userOrderBy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userSearchBy", userSearchBy);
            ListOverride(callInfo, term, pageNumber, pageCount, order, userOrderBy, userSearchBy);
            return callInfo;
        }

        [NonAction]
        partial void DetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Details(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Details);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DetailsOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Edit(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.EditUserViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(ViewModel.Admin.EditUserViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            EditOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long? id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Add()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Add);
            AddOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, ViewModel.Admin.AddUserViewModel viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Add(ViewModel.Admin.AddUserViewModel viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Add);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            AddOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AdminCheckUserNameIsExistForAddOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string userName);

        [NonAction]
        public override System.Web.Mvc.JsonResult AdminCheckUserNameIsExistForAdd(string userName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AdminCheckUserNameIsExistForAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            AdminCheckUserNameIsExistForAddOverride(callInfo, userName);
            return callInfo;
        }

        [NonAction]
        partial void AdminCheckPhoneNumberIsExistForAddOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string phoneNumber);

        [NonAction]
        public override System.Web.Mvc.JsonResult AdminCheckPhoneNumberIsExistForAdd(string phoneNumber)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AdminCheckPhoneNumberIsExistForAdd);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "phoneNumber", phoneNumber);
            AdminCheckPhoneNumberIsExistForAddOverride(callInfo, phoneNumber);
            return callInfo;
        }

        [NonAction]
        partial void EditCheckUserNameIsExistOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string userName, long id);

        [NonAction]
        public override System.Web.Mvc.JsonResult EditCheckUserNameIsExist(string userName, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCheckUserNameIsExist);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditCheckUserNameIsExistOverride(callInfo, userName, id);
            return callInfo;
        }

        [NonAction]
        partial void EditCheckPhoneNumberIsExistOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string phoneNumber, long id);

        [NonAction]
        public override System.Web.Mvc.JsonResult EditCheckPhoneNumberIsExist(string phoneNumber, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCheckPhoneNumberIsExist);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "phoneNumber", phoneNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditCheckPhoneNumberIsExistOverride(callInfo, phoneNumber, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009
